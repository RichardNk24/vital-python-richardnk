# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .client_facing_lab import ClientFacingLab
from .client_facing_marker import ClientFacingMarker
from .lab_test_collection_method import LabTestCollectionMethod
from .lab_test_sample_type import LabTestSampleType
from .lab_test_status import LabTestStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ClientFacingLabTest(pydantic.BaseModel):
    id: str = pydantic.Field()
    """
    
    """

    slug: str = pydantic.Field()
    """
    
    """

    name: str = pydantic.Field()
    """
    
    """

    sample_type: LabTestSampleType = pydantic.Field()
    """
    
    """

    method: LabTestCollectionMethod = pydantic.Field()
    """
    
    """

    price: float = pydantic.Field()
    """
    
    """

    is_active: bool = pydantic.Field()
    """
    Deprecated. Use status instead.
    """

    status: LabTestStatus = pydantic.Field()
    """
    
    """

    fasting: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Defines whether a lab test requires fasting.
    """

    lab: typing.Optional[ClientFacingLab] = pydantic.Field(default=None)
    """
    
    """

    markers: typing.Optional[typing.List[ClientFacingMarker]] = pydantic.Field(default=None)
    """
    
    """

    is_delegated: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Denotes whether a lab test requires using non-Vital physician networks. If it does then it's delegated - no otherwise.
    """

    auto_generated: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the lab test was auto-generated by Vital
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
