# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .client_facing_note_sample_tags_item import ClientFacingNoteSampleTagsItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ClientFacingNoteSample(pydantic.BaseModel):
    id: typing.Optional[int]
    timezone_offset: typing.Optional[int]
    type: typing.Optional[str]
    unit: str = pydantic.Field(description="User notes as text.")
    timestamp: str = pydantic.Field(description="Depracated. The start time (inclusive) of the interval.")
    start: str = pydantic.Field(description="The start time (inclusive) of the interval.")
    end: str = pydantic.Field(description="The end time (exclusive) of the interval.")
    value: str = pydantic.Field(description="The recorded value for the interval.")
    tags: typing.Optional[typing.List[ClientFacingNoteSampleTagsItem]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
