# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError
from ...types.query_config import QueryConfig
from ...types.query_instruction import QueryInstruction
from .types.query_timeframe import QueryTimeframe

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AggregateClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def query_one(
        self,
        user_id: str,
        *,
        timeframe: QueryTimeframe,
        instructions: typing.List[QueryInstruction],
        config: typing.Optional[QueryConfig] = OMIT,
    ) -> typing.Any:
        """
        Parameters:
            - user_id: str.

            - timeframe: QueryTimeframe.

            - instructions: typing.List[QueryInstruction].

            - config: typing.Optional[QueryConfig].
        ---
        from vital import QueryInstruction, Reducer, ReducerFunction
        from vital.client import Vital

        client = Vital(
            api_key="YOUR_API_KEY",
        )
        client.aggregate.query_one(
            user_id="user_id",
            instructions=[
                QueryInstruction(
                    reduce_by=[
                        Reducer(
                            function=ReducerFunction.MEAN,
                        )
                    ],
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"timeframe": timeframe, "instructions": instructions}
        if config is not OMIT:
            _request["config"] = config
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"aggregate/v1/query_one/{user_id}"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "accept": "*/*"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAggregateClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def query_one(
        self,
        user_id: str,
        *,
        timeframe: QueryTimeframe,
        instructions: typing.List[QueryInstruction],
        config: typing.Optional[QueryConfig] = OMIT,
    ) -> typing.Any:
        """
        Parameters:
            - user_id: str.

            - timeframe: QueryTimeframe.

            - instructions: typing.List[QueryInstruction].

            - config: typing.Optional[QueryConfig].
        ---
        from vital import QueryInstruction, Reducer, ReducerFunction
        from vital.client import AsyncVital

        client = AsyncVital(
            api_key="YOUR_API_KEY",
        )
        await client.aggregate.query_one(
            user_id="user_id",
            instructions=[
                QueryInstruction(
                    reduce_by=[
                        Reducer(
                            function=ReducerFunction.MEAN,
                        )
                    ],
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"timeframe": timeframe, "instructions": instructions}
        if config is not OMIT:
            _request["config"] = config
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"aggregate/v1/query_one/{user_id}"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_dict({**self._client_wrapper.get_headers(), "accept": "*/*"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
