# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .address import Address

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ClientFacingPayorSearchResponse(pydantic.BaseModel):
    code: str = pydantic.Field()
    """
    Payor code returned for the insurance information.
    """

    name: str = pydantic.Field()
    """
    Insurance name returned for the insurance information.
    """

    aliases: typing.List[str] = pydantic.Field()
    """
    Insurance name aliases returned for the insurance information.
    """

    org_address: Address = pydantic.Field()
    """
    Insurance business address returned for the insurance information.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
