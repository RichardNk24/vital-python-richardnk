# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .query_instruction_partition_by import QueryInstructionPartitionBy
from .query_instruction_select import QueryInstructionSelect
from .query_instruction_swizzle_by import QueryInstructionSwizzleBy
from .reducer import Reducer

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class QueryInstruction(pydantic.BaseModel):
    select: QueryInstructionSelect
    partition_by: QueryInstructionPartitionBy
    swizzle_by: QueryInstructionSwizzleBy
    reduce_by: typing.List[Reducer]
    prioritize_by: typing.Optional[typing.List[typing_extensions.Literal["by_source_priority"]]]
    split_by_source: typing.Optional[bool]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
